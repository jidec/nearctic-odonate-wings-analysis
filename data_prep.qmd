---
title: "Data Prep"
---

```{r setup, include=FALSE}

knitr::opts_chunk$set(eval = FALSE)
```

Note - performing the second clustering step as I did requires Python with the package bigcrittercolor, so if you don't want to do this I would recommend skipping to the "Descriptive" page where we load the data after clustering has been performed.

Manually download wing segments from Zenodo (https://zenodo.org/records/10714418). The below code assumes segments are placed in the data/segments folder, but of course you can place them anywhere as long as you provide that path.

Load **colorEvoHelpers** (a personal package) installing it if necessary.

```{r}

#devtools::install_github("jidec/color-evo-helpers")
library(colorEvoHelpers)
library(dplyr)
library(recolorize)

```

Perform first clustering step, which applies clustering from the R package **recolorize** to all images individually.

```{r}

# median_blur_n is the pixel size of the blur kernel
# cluster_cutoff is the cutoff for the recolorize function, determining what clusters to keep 
recolorizeSegmentDir(dir="data/segments","data/bcc_project/patterns",median_blur_n = 7, cluster_cutoff = 25) 

```

The Python clustering function is part of the package **bigcrittercolor**.

In Python, look at dispersion and cohesion scores to pick a number of clusters.

```{python}
#!pip install git+https://github.com/jidec/bigcrittercolor.git@main
from bigcrittercolor import clusterColorsToPatterns
from bigcrittercolor.helpers.ids import _getIDsInFolder

ids = _getIDsInFolder("data/segments")
ids = [i + "_hind" for i in ids] + [i + "_fore" for i in ids]

clusterColorsToPatterns(img_ids=ids, preclustered=True, blur_args={'type':"gaussian",'ksize':21}, equalize_args=None,
                        colorspace="rgb",
                        cluster_args={'algo':"gaussian_mixture"},
                        data_folder="data/bcc_project/patterns",height_resize=20)
```

Perform second clustering step.

```{python eval=FALSE}

ids = _getIDsInFolder("D:/wing-color/data/segments")
ids = [i + "_hind" for i in ids] + [i + "_fore" for i in ids]

clusterColorsToPatterns(img_ids=ids, preclustered=True, blur_args={'type':"gaussian",'ksize':21}, equalize_args=None,
                        colorspace="rgb",
                        cluster_args={'algo':"gaussian_mixture",'n':3},
                        data_folder="data/bcc_project/patterns",height_resize=20)

```

Prep the wing data, returning a tuple containing:

1\. individual-level data

2\. individual-level data trimmed to phy

3\. phy trimmed to data

4\. species-level data

5\. species-level data trimmed to phy

6\. species-sex level data

7\. species-sex-forehind level data

```{r}
source("R/prepOdomaticDataFromPatterns.R")
data <- prepOdomaticDataFromPatterns(wing_img_loc = "data/patterns/grouped2", tc1_1 = 0.5529, tc1_2 = 0.2470)
```

Note to self - do this more simply next time!
